<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[深海后花园]]></title>
  <link href="http://www.xuchunwei.com/atom.xml" rel="self"/>
  <link href="http://www.xuchunwei.com/"/>
  <updated>2015-01-27T23:20:25+08:00</updated>
  <id>http://www.xuchunwei.com/</id>
  <author>
    <name><![CDATA[徐春伟]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yii随笔]]></title>
    <link href="http://www.xuchunwei.com/blog/20140127/yii/"/>
    <updated>2014-01-27T23:06:45+08:00</updated>
    <id>http://www.xuchunwei.com/blog/20140127/yii</id>
    <content type="html"><![CDATA[<p>yii是一个基于组件的高性能php框架，采用严格的OOP编写，非常易于学习和使用。最让我欣赏的是开发速度非常快。</p>

<!--more-->


<p>查看环境是否支持</p>

<p><a href="http://hostname/requirements/index.php">http://hostname/requirements/index.php</a></p>

<p>安装
cd framework
php yiic webname ../
注：需在 config/main.php 加 ‘timezone’ =>’Asia/singapore’</p>

<p>连接DB
改config/main.php,若用mysql则去掉’db’=>array(‘connectionString’=>’mysql:host=localhost;dbname=test’,xxx),注释</p>

<p>测试连接DB
var_dump(Yii::app()->db)</p>

<p>配置gii
改config/main.php,去掉‘gii’=>array(‘class’=>’system.gii.GiiModule’,xxx),注释
注：‘password’=‘xxx’,是登录gii的密码。</p>

<p>设置默认控制器
改config/main.php 加 ‘defaultController’ => ‘xxx’,</p>

<p>Yii urlManager
改config/main.php,去掉‘urlManager’=>array(xxx),注释
‘urlSuffix’=>’.html’,以html做为后缀
url去掉index.php
1.添加 ‘showScriptName’=>false,
2.在网站根目录添加.htaccess文件
options +FollowSymLinks
RewriteEngine on
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . index.php
3.apache.conf中添加AllowOverride All
4.apache安装了rewrite模块</p>

<p>$this->render(‘xxx’) 会载入layouts里的布局
$this->renderPartial(‘xxx’) 不载入布局，也不会载入框架自带的jquery等</p>

<p>生成模型
访问 <a href="http://xxx/index.php?r=gii,%E7%82%B9%E5%87%BBModel">http://xxx/index.php?r=gii,%E7%82%B9%E5%87%BBModel</a> Generator</p>

<p>生成CRUD代码
点击Crud Generator,Model Class中输入创建好的Model
注：访问创建的crud，<a href="http://xxx/index.php?r=">http://xxx/index.php?r=</a>{modelClassName}</p>

<p>在生产环境下删除/index.php中的 defined(‘YII_DEBUG’)ordefine(‘YII_TRACE_LEVEL’,3)</p>

<p>要访问一个组件可 Yii::app()->{ComponentID}</p>

<p>在/protected/controllers/xxxController.php中 accessRules()可控制用户的使用权限</p>

<p>开启DB日志
在config/main.php 中的 ‘db’=>array() 添加 ‘enableProfiling’=>YII_DEBUG,
‘enableParamLogging’=>YII_DEBUG,还要在 ‘log’=>array() 添加
array(‘class’=>’CWebLogRoute’,’levels’=>’trace’,’categories’=>’system.db.*’)</p>

<p>yii数据库规范
表名和列名都小写，单词以_分割，表名使用单数名字</p>

<p>yii DAO包含四个类
CDbConnection 代表一个数据库连接
CDbCommand 代表一条通过数据库执行的 SQL 语句
CDbDataReader 代表一个只向前移动的，来自一个查询结果集中的行的流
CDbTransaction 代表一个数据库事务</p>

<p>执行sql语句
$command = YII::app()->db->createCommand($sql)
$command->execute() 执行无查询sql
$command->query() 执行一个sql查询
$command->queryAll() 查询并返回结果中的所有行
$command->queryRow() 查询并返回结果中的第一行
$command->queryColumn() 查询并返回结果中的第一列
$command->queryScalar() 查询并返回结果中第一行的第一个字段</p>

<p>$command->bindParam(‘:x’,$value,PDO::PARAM_STR/PDO::PARAM_INT)
$command->bindValue(‘:x’,’xxx’,PDO::PARAM_STR/PDO::PARAM_INT)
注：若配置表前缀可以在sql语句中写</p>

<p>获得查询结果
$dataReader = $command->query();
while(($row=$dataReader->read())!==false) { … } 重复调用 read() 直到它返回 false
foreach($dataReader as $row) { … } 使用 foreach 遍历数据中的每一行
$rows=$dataReader->readAll(); 一次性提取所有行到一个数组</p>

<p>读取记录(AR)</p>

<p>$post=Post::model()->find($condition,$params); 查找满足指定条件的结果中的第一行
例:$posts=Post::model()->find(array(
‘select’=>’title’,
‘condition’=>’postID=:postID’,
‘params’=>array(‘:postID’=>10),
))
$posts=Post::model()->find(‘id=:id’,array(‘:id’=>$id))
$post=Post::model()->findByPk($postID,$condition,$params); 查找具有指定主键值的那一行
$post=Post::model()->findByAttributes($attributes,$condition,$params); 查找具有指定属性值的行
例:$post=Post::model()->findByAttributes(array(‘name’=>$name))
$post=Post::model()->findBySql($sql,$params); 通过指定的 SQL 语句查找结果中的第一行</p>

<p>$posts=Post::model()->findAll($condition,$params); 查找满足指定条件的所有行
$posts=Post::model()->findAllByPk($postIDs,$condition,$params); 查找带有指定主键的所有行
$posts=Post::model()->findAllByAttributes($attributes,$condition,$params); 查找带有指定属性值的所有行
$posts=Post::model()->findAllBySql($sql,$params); 通过指定的SQL语句查找所有行
注：如果没有任何东西符合查询条件，findAll 将返回一个空数组。find 会在没有找到什么东西时返回 null</p>

<p>Post::model()->count($condition,$params) 获取满足指定条件的行数
Post::model()->countBySql($sql,$params) 通过指定的 SQL 获取结果行数
Post::model()->exists($condition,$params) 检查是否至少有一行复合指定的条件</p>

<p>更新记录
save可执行插入和更新操作，如果AR使用new创建的是插入，如果是find或findAll方法，则是更新
如：$post = Post::model()->findByPk(10);
$post -> title = ‘new title’;
$post -> save() //更新</p>

<p>Post::model()->updateAll($attributes,$condition,$params); 更新符合指定条件的行
Post::model()->updateByPk($pk,$attributes,$condition,$params); 更新符合指定条件和主键的行
Post::model()->updateCounters($counters,$condition,$params); 更新满足指定条件的行的计数列</p>

<p>删除记录
$post = Post::model()->findByPk(10);
$post -> delete();
Post::model()->deleteAll($condition,$params); 删除符合指定条件的行
Post::model()->deleteByPk($pk,$condition,$params); 删除符合指定条件和主键的行
注：删除之后，AR实例仍然不变，但数据表的数据会删除</p>

<p>数据验证
当save()时自动验证，基于rules()指定规则验证
$post->title=$<em>POST[&lsquo;title&rsquo;];
$post->content=$</em>POST[&lsquo;content&rsquo;];
$post->save();
可以简化为
$post->attributes=$_POST[&lsquo;Post&rsquo;];
$post->save();</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql随笔]]></title>
    <link href="http://www.xuchunwei.com/blog/20100119/mysql/"/>
    <updated>2010-01-19T21:43:59+08:00</updated>
    <id>http://www.xuchunwei.com/blog/20100119/mysql</id>
    <content type="html"><![CDATA[<p>mysql是web开发使用最广泛的数据库之一，最让我欣赏的是它是免费的</p>

<!--more-->


<h2>常用命令</h2>

<p>mysql服务的启动和停止</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>net stop mysql
</span><span class='line'>net start mysql</span></code></pre></td></tr></table></div></figure>


<p>登陆mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysql -u user -p password  # 如果是连接到另外的机器上，则需要加入一个参数-h机器IP</span></code></pre></td></tr></table></div></figure>


<p>增加新用户</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”  # 增加一个用户user1密码为password1，让其可以在本机上登录， 并对所有数据库有查询、插入、修改、删除的权限。
</span><span class='line'>首先用以root用户连入mysql，然后键入以下命令：
</span><span class='line'>grant select,insert,update,delete on *.* to user1@localhost Identified by “password1″;
</span><span class='line'>如果希望该用户能够在任何机器上登陆mysql，则将localhost改为”%”。
</span><span class='line'>如果你不想user1有密码，可以再打一个命令将密码去掉。
</span><span class='line'>grant select,insert,update,delete on mydb.* to user1@localhost identified by “”;</span></code></pre></td></tr></table></div></figure>


<p>显示数据库列表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>show databases;</span></code></pre></td></tr></table></div></figure>


<p>显示库中的数据表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use mysql;
</span><span class='line'>show tables;</span></code></pre></td></tr></table></div></figure>


<p>显示数据表的结构</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe tableName;</span></code></pre></td></tr></table></div></figure>


<p>建库与删库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>create database databaseName;
</span><span class='line'>drop database databaseName;</span></code></pre></td></tr></table></div></figure>


<p>建表</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use databaseName;
</span><span class='line'>create table tableName(字段列表);
</span><span class='line'>drop table tableName;</span></code></pre></td></tr></table></div></figure>


<p>清空表中记录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>truncate tableName;</span></code></pre></td></tr></table></div></figure>


<p>导出数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mysqldump –opt test &gt; mysql.test  # mysqldump -u root -p123456 –databases dbname &gt; mysql.dbname</span></code></pre></td></tr></table></div></figure>


<p>导入数据</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use mysql;
</span><span class='line'>source /var/mysql.sql;</span></code></pre></td></tr></table></div></figure>


<p>将文本数据导入数据库<br/>
文本数据的字段数据之间用tab键隔开。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use test;
</span><span class='line'>load data local infile “文件名” into table 表名;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux随笔]]></title>
    <link href="http://www.xuchunwei.com/blog/20100118/linux/"/>
    <updated>2010-01-18T15:09:43+08:00</updated>
    <id>http://www.xuchunwei.com/blog/20100118/linux</id>
    <content type="html"><![CDATA[<p>linux是服务器端操作系统不二之选，是从事程序开发必备技能之一。本文记录linux的基础命令(debian版本)。</p>

<!--more-->


<h2>vi</h2>

<p>按<code>h</code> <code>j</code> <code>k</code> <code>l</code>光标移动为 左，下，上，右 <br/>
<code>ctrl+f</code> 向前移动一页 <br/>
<code>ctrl+b</code> 向后移动一页 <br/>
<code>ctrl+d</code> 向前移动半页 <br/>
<code>ctrl+u</code> 向后移动半页<br/>
<code>+</code> 向下移动一行<br/>
<code>-</code> 向上移动一行</p>

<p><code>/word</code> 光标后查找word字符串<br/>
<code>?word</code> 光标前查找word字符串</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>x # 向后删除一个字符(`10x` 向后删除10个字符)
</span><span class='line'>X # 向前删除一个字符
</span><span class='line'>dd # 删除光标所在行(`10dd` 删除光标所在向下10行, `d10G` 删除光标所在到第10行, `dG` 删除光标及以下所有行)
</span><span class='line'>yy # 复制光标所在行(`10yy` 复制光标所在向下10行, `y10G` 复制光标所在到第10行, `yG` 复制光标及以下所有行)
</span><span class='line'>p # 粘贴在光标下一行
</span><span class='line'>P # 粘贴在光标上一行
</span><span class='line'>J # 光标所在行与下一行合并
</span><span class='line'>u # 复原前一个动作</span></code></pre></td></tr></table></div></figure>


<p>按<code>i</code> <code>I</code> <code>o</code> <code>O</code> <code>a</code> <code>A</code> <code>r</code> <code>R</code>进入编辑模式<br/>
按<code>ESC</code>退出编辑模式<br/>
按<code>:</code> <code>/</code>进入命令行模式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:w fileName # 保存为fileName(3,7 w file 将3到7行的内容存为file)
</span><span class='line'>:r fileName # 将fileName加到光标所在行后面
</span><span class='line'>:wq # 存盘并退出(wx 亦可)
</span><span class='line'>:w! # 若为只读属性，则强制写入
</span><span class='line'>:e! # 还原至原始状态
</span><span class='line'>:q! # 不存盘退出
</span><span class='line'>:set nu # 显示行号
</span><span class='line'>:set nonu # 取消行号</span></code></pre></td></tr></table></div></figure>


<h2>shell</h2>

<p>rm[remove] 删除文件或目录<br/>
rm -f filename -f 强制删除文件。-rf 删除目录不提示确认</p>

<p>cp[copy] 复制文件/文件夹<br/>
cp -i 源文件 目标文件 -i 当目标文件存在时提示。-r 复制文件夹</p>

<p>cd[change directory] 切换目录<br/>
cd .. 返回上一层。cd 返回用户目录。</p>

<p>cat 显示文件内容<br/>
cat > filename 创建一个文件。cat file1 file2 > file 合并文件</p>

<p>more 显示文件内容<br/>
和cat类似，分屏显示</p>

<p>ls[ list ] 列出目录内容<br/>
ls -a 显示所有文件包含以.开头的隐含文件。ls -l 列出文件的详细信息</p>

<p>mv[move] 移动或更名现有目录或文件<br/>
mv -i 源文件 目标文件 -i 当目标文件存在时提示 -f 禁止交互操作,不提示,-i失去作用。mv * ../ 移动当前所有文件到上一级。</p>

<p>mkdir[make directories] 建立目录<br/>
mkdir 777 dirname 建立777权限的目录</p>

<p>chmod[change mode] 更改文件或目录的权限<br/>
chmod a=rwx file 更改file为所有权限。chmod abc file a代表user,b代表group,c代表other 的权限,r=4,w=2,x=1 chmod -R 777 file 文件夹及子文件夹一并处理</p>

<p>chown[change owner] 变更文件或目录的拥有者或所属群组<br/>
chown oracle:net /home/u1 表示改变目录所有者为oracle账户和组net -R 递归处理，将指定目录下的所有文件及子目录一并处理</p>

<p>chgrp[change group] 变更文件或目录的所属群组<br/>
chgrp dba /home/u1 改变/home/u1目录为dba所有 -R 递归处理，将指定目录下的所有文件及子目录一并处理</p>

<p>tar[tape archive] 备份文件<br/>
tar -cvf xx.tar xx.txt/xx 备份xx.txt文件或xx目录。tar -xvf xx.tar /var/www/ 解备份xx.tar文件至/var/www/。tar -rf xx.tar xx.txt 增加备份xx.txt文件。tar -tf xx.tar 查看xx.tar里文件。tar -tf 1.tar | grep 1.txt 查打1.tar中的1.txt文件 去掉txt则查找1文件。tar –exclude a -cf xx.tar * 备份当前目录所有的文件除了a文件夹</p>

<p>du[disk usage] 显示目录或文件的大小<br/>
du -sh /var 显示var的大小</p>

<p>pwd[print working directory] 显示工作目录</p>

<p>id 显示用户的ID，以及所属群组的ID</p>

<p>mount 加载文件系统<br/>
-r 以只读的模式载入设备 -w 以可读写模式载入设备 mount /dev/hda5/ /mnt 把hda5加载到/mnt</p>

<p>man 查看命令帮助信息<br/>
按q退出</p>

<p>unzip 解压缩zip文件<br/>
unzip xx.zip 解压xx.zip文件。unzip -d /www xx.zip 解压xx.zip文件到www。unzip -l xx.zip 查看xx.zip包含哪些文件。-o 不询问用户覆盖原有文件。-f 更新现有文件。</p>

<p>find 查找文件或目录<br/>
find / -name xx.txt 按名字查找xx.txt。<br/>
find / -size 1500c 查大小为1500字节的文件<br/>
find / -size +1000c 查找大于10000btyes的文件，用减号表示小于10000字节<br/>
find / -mmin -5 查找最后5分钟修改过的文件<br/>
find / -mtime -1 查找最后一天修改过的文件<br/>
find / -amin -10 查找在系统中最后10分钟访问的文件<br/>
find / -atime -2 查找最后2天访问的文件<br/>
find / -empty 查找为空的文件或文件夹<br/>
find / -group cat 查找属于组cat的文件<br/>
find / -nouser 查找属于作废用户的文件<br/>
find / -user fred 查找fred用户的文件<br/>
find / -cmin n 查找是n分钟改变状态的文件<br/>
find / -false 查找总是错误的文件</p>

<p>wc[word count] 计算字数<br/>
-c 只显示bytes数。-l 只显示列数。-w 只显示字数。</p>

<p>useradd 新增用户帐号<br/>
-u 直接给出用户id。-g 给出用户组。-d 将根目录建立在已存在目录上。-s 定义shell 。useradd -d /home/weixiaohong -g www-data -s /bin/sh username</p>

<p>passwd 设置密码<br/>
新增用户后，要设置密码，否则不能用。-d 使用户无密码</p>

<p>usermod 修改用户<br/>
usermod -l newuser olduser 修改用户名olduser为newuser</p>

<p>userdel 删除用户<br/>
userdel user 删除用户user，-r 属于user的文件也删除(最好不用)。-f 删除用户登入目录以及目录中所有文件</p>

<p>who 显示目前登入系统的用户信息</p>

<p>w 显示目前登入系统的用户信息</p>

<p>groupadd 增加用户组</p>

<p>groupmod 修改用户组<br/>
-n newgroup oldgroup</p>

<p>groupdel 删除用户组</p>

<p>newgrp 登入另一个群组<br/>
如果当前用户属于多个群组，可以切换到另个群组。</p>

<p>cat /etc/passwd 查用户信息</p>

<p>cat /etc/shadow 查看密码</p>

<p>cat /etc/group 查看用户组</p>

<p>cat /proc/version 查看系统信息</p>

<p>more /proc/cpuinfo 查看cpu信息</p>

<p>ifconfig 显示或设置网络设备</p>

<p>free 显示内存状态<br/>
-s 3 持续观察，间隔3秒。</p>

<p>df[disk free] 显示磁盘的相关信息<br/>
-h 以可读性较高的方式来显示硬盘剩余信息。-i 显示inode(索引)信息。-</p>

<p>startx[start X Window] 启动X Window</p>

<p>sync 将内存缓冲区内的数据写入磁盘</p>

<p>shutdown 系统关机指令<br/>
shutdown -h new 将系统关机。-k 只是送出信息给所有用户，但不会实际关机。-r shutdown之后重新启动。shutdown -r +10 十分钟后重启。shutdown -h 10:00 十点钟重启</p>

<p>reboot 重启</p>

<p>新建文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi xx.txt
</span><span class='line'>echo “xxx” &gt; xx.txt
</span><span class='line'>cat &gt; xx.txt
</span><span class='line'>touch xx.txt</span></code></pre></td></tr></table></div></figure>


<p><code>ctrl+c</code> 中止当前命令的执行<br/>
退出系统</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctrl+d
</span><span class='line'>logout
</span><span class='line'>exit</span></code></pre></td></tr></table></div></figure>


<p>设置vi语法高亮显示<br/>
修改 /etc/vim/vimrc ，使其syntax on前面的注释符去掉</p>

<p>history 保存了最近执行过的500条命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>!n 执行编号为n的命令
</span><span class='line'>!-n 执行倒数第n个命令
</span><span class='line'>!! 执行上一个历史命令（在历史记录中不加入）
</span><span class='line'>!xx 执行以’xx’开头的历史命令
</span><span class='line'>!?xx? 执行包含’xx’的历史命令</span></code></pre></td></tr></table></div></figure>


<p>当输入到足够多的字符时，按tab会自动补全<br/>
三种通配符</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>？表示任意的单个字符
</span><span class='line'>* 表示任意长的任意字符串
</span><span class='line'>[] 表示匹配放在[]中的字符集中的单个字符</span></code></pre></td></tr></table></div></figure>


<p>shell使用的三种引号:
<em>双引号” 在双引号除 $,”,’和\以外的特殊字符的特殊意义都解释成字符本身。
</em>单引号’ 纯字符，所有特殊字符都将失去意义
*反引号` 反引号中的字符被解释成命令</p>

<p>输入重定向<br/>
格式：命令 &lt; 数据文件 输出重定向 格式：命令 > 数据文件</p>

<p>例：cat file1 file2 > file.txt<br/>
在文件名和’>’之间要放一个空格，数据文件不论原先是否存在，都是将命令的输出覆盖上去。</p>

<p>命令 >> 数据文件<br/>
是输出追加符，若数据文件已存在，则添加到文件尾部，否则建立新的。</p>

<p>管道操作符 ‘|’ 是把一条命令的标准输出和另一条命令的标准输入相连的操作<br/>
同一命令行用&#8217;;’隔开，分号前后命令无因果关系<br/>
&amp;&amp; 连接两个命令，前一个成功后一个执行<br/>
|| 连接两个命令，前一个不成功后一个执行</p>

<p>linux 文本启动方式<br/>
修改 /etc/inittab 文件中的 id:5:initdefault 中的5改成3</p>

<blockquote><p>0：关机<br/>
1：单用户模式<br/>
2：多用户(不支持网络登录)<br/>
3：多用户<br/>
4：保留(系统保留)<br/>
5：x-window<br/>
6：重启<br/>
至此系统重启后就进入命令行状态，但是对debian系统来说，还是不行的，还需
进入 /etc/rc3.d。然后把s30gdm 改成k70gdm。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get upgrade 把本机所有软件升级到最新版
</span><span class='line'>apt-get clean 清除 /var/cache/apt/archives/ 下的缓存文件
</span><span class='line'>apt-get autoclean 清除 archives 下没用的或不完整的软件包</span></code></pre></td></tr></table></div></figure>


<p><code>apt-get remove xx</code> 卸载xx软件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>安装mysql5
</span><span class='line'>sudo apt-get install mysql-server
</span><span class='line'>安装apache2
</span><span class='line'>sudo apt-get install apache2
</span><span class='line'>安装php5
</span><span class='line'>sudo apt-get install php5
</span><span class='line'>安装php的mysql模块
</span><span class='line'>sudo apt-get install php5-mysql
</span><span class='line'>安装GD库
</span><span class='line'>sudo apt-get install php5-gd
</span><span class='line'>安装phpmyadmin
</span><span class='line'>sudo apt-get install phpmyadmin
</span><span class='line'>安装vsftpd
</span><span class='line'>sudo apt-get install vsftpd
</span><span class='line'>安装ssh
</span><span class='line'>sudo apt-get install ssh
</span><span class='line'>安装zip
</span><span class='line'>sudo apt-get install unzip</span></code></pre></td></tr></table></div></figure>


<blockquote><p>mysql的配置文件my.cnf /etc/mysql/my.cnf<br/>
apache2的配置文件apache2.conf /etc/apache2/apache2.conf<br/>
php的配置文件php.ini /etc/php5/apache2/php.ini<br/>
vsftpd的配置文件vsftpd.conf /etc/vsftpd.conf</p>

<p>apache的启动和停止命令 /etc/init.d/apache2 start|restart|stop<br/>
mysql的启动和停止命令 /etc/init.d/mysql start|restart|stop<br/>
vsftpd的配置文件 /etc/init.d/vsftpd start|restart|stop</p>

<p>mysql数据库文件存在/var/lib/mysql</p></blockquote>
]]></content>
  </entry>
  
</feed>
